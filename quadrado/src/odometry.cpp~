#include "ros/ros.h"
#include "nav_msgs/Odometry.h"
#include "geometry_msgs/Twist.h"

void odometryCallback(const nav_msgs::OdometryConstPtr& msg)
{
	curr_x_ = msg->pose.pose.position.x;
	curr_y_ = msg->pose.pose.position.y;
	curr_phi_ = tf::getYaw(msg->pose.pose.orientation);

	if (!odom_setted_)
	{
		ROS_INFO("Odometry initialized!!!");
		odom_setted_ = true;
		prev_phi_ = curr_phi_;
	}

	disp_x_ = (curr_x_ - start_x_) * cos(-start_phi_) - (curr_y_ - start_y_) * sin(-start_phi_);
	disp_y_ = (curr_y_ - start_y_) * cos(-start_phi_) + (curr_x_ - start_x_) * sin(-start_phi_);

	while (curr_phi_ - prev_phi_ < PI)
	{
		curr_phi_ += 2 * PI;
	}

	while (curr_phi_ - prev_phi_ > PI)
	{
		curr_phi_ -= 2 * PI;
	}

	disp_phi_ += curr_phi_ - prev_phi_;
	prev_phi_ = curr_phi_;
}



int main(int argc, char **argv)
{
	ros::init(argc, argv, "odometry");
	ros::NodeHandle n;
	
	ros::subscriber sub = n.subscribe("nav_msgs::Odometry", 100, odometryCallback);
	ros::spin();

	return 0;
}
